// Amaze UI Mobile: Grid
// =============================================================================

// Mixins
// -----------------------------------------------------------------------------

// Define the size of a grid col.
@mixin grid-size($size: expand) {
  @if (type-of($size) == 'number') {
    $percent: percentage($size / $total-columns);
    flex: 0 0 $percent;
    // max-width prevents columns from wrapping early in IE10/11
    max-width: $percent;
    width:$percent;
    // fuck android uc
    @include flex-basis-fallback($percent)
  } @else if ($size == shrink) {
    flex: 0 0 auto;
    overflow: visible;
  } @else if ($size == expand) {
    flex: 1 1 auto;
  }
}

// Define the offset of col.
@mixin grid-offset($offset: false) {
  @if ($offset != false) {
    margin-left: percentage($offset / $total-columns);
  }
}

// Set grid container wrap.
@mixin grid-wrap($wrap: nowrap) {
  flex-wrap: $wrap;
}

// Set the alignment of cols within a grid.
@mixin grid-align($align: left) {
  justify-content: map-get($grid-aligns, $align);
}

// Set col order in grid.
@mixin grid-order($order: 0) {
  order: $order;
}

// Remove col padding
@mixin grid-collapse($collapse: true) {
  @if ($collapse) {
    padding: 0;
  }
}

//
@mixin grid-nest($nest: true) {
  @if ($nest) {
    margin-left: -$grid-padding;
    margin-right: -$grid-padding;
  }
}

// average children
@mixin grid-average($cols) {
  flex-wrap: wrap;
  overflow: visible;
  list-style: none;

  > li,
  > div {
    padding: 0 $grid-padding $grid-padding;
    flex: 0 0 percentage(1 / $cols);
    max-width: percentage(1 / $cols);

    @include flex-basis-fallback(percentage(1 / $cols));
  }
}
//@see https://css-tricks.com/filling-space-last-row-flexbox/

// Output
// -----------------------------------------------------------------------------

.#{$grid-prefix} {
  display: flex;
  position: relative;
  overflow: hidden;
  backface-visibility: hidden;
  align-items: stretch;

  // nested grid
  .#{$grid-prefix} {
    @include grid-nest();
  }

  // collapse
  &.#{$grid-prefix}-collapse {
    .#{$col-prefix} {
      @include grid-collapse();
    }
  }
}

// grid modifiers: flex container wrap
@each $wrap in wrap, wrap-reverse {
  .#{$grid-prefix}-#{$wrap} {
    @include grid-wrap($wrap);
  }
}

// grid modifiers: flex children alignment
@each $grid-align-key, $grid-align-v in $grid-aligns {
  .#{$grid-prefix}-#{$grid-align-key} {
    @include grid-align($grid-align-key);
  }
}

.#{$col-prefix} {
  @include grid-size();
  padding-left: $grid-padding;
  padding-right: $grid-padding;
}

@for $i from 1 through $total-columns {
  // col sizing
  .#{$col-prefix}-#{$i} {
    @include grid-size($i);
  }

  // col offset
  .#{$col-prefix}-offset-#{$i} {
    @include grid-offset($i);
  }

  // average children
  .#{$grid-prefix}-avg-#{$i} {
    @include grid-average($i);
  }

  // flex child order
  .#{$namespace}order-#{$i} {
    @include grid-order($i);
  }
}

// FUCK Android UC
// AVG Grid flex-wrap fallback
.#{$legacy-android-uc} {
  [class*="#{$grid-prefix}-avg-"] {
    > li,
    > div {
      display: inline-block;
    }
  }
}

// modifier: col shrink
.#{$col-prefix}-shrink {
  @include grid-size(shrink);
}
